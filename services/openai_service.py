from typing import List, Dict
from utils.config_loader import config
from database.connection import db

class OpenAIService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI API"""
    
    @staticmethod
    async def get_response(user_id: int, user_message: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
        api_key = config.get('OPENAI_API_KEY')
        if not api_key or api_key == 'TEMP_PLACEHOLDER':
            # –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            await OpenAIService._save_message_to_history(user_id, user_message, "dev_response")
            return f"ü§ñ <b>–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏</b>\n\n–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: <i>{user_message}</i>\n\n" \
                   f"OpenAI API –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –≠—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ –æ—Ç–≤–µ—Ç–∞.\n" \
                   f"–ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∑–¥–µ—Å—å –±—É–¥–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∏–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç!"
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)
            message_history = await OpenAIService._get_message_history(user_id)
            
            # TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å OpenAI
            # import openai
            # openai.api_key = api_key
            
            # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
            ai_response = f"–û—Ç–≤–µ—Ç –ò–ò –Ω–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_message}"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
            await OpenAIService._save_message_to_history(user_id, user_message, ai_response)
            
            return ai_response
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ OpenAI API: {e}")
            return "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    @staticmethod
    async def _get_message_history(user_id: int, limit: int = 10) -> List[Dict[str, str]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            rows = await db.fetchall("""
                SELECT message, response FROM chat_history 
                WHERE user_id = ? 
                ORDER BY timestamp DESC 
                LIMIT ?
            """, (user_id, limit))
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–≤—ã–º–∏)
            history = []
            for row in reversed(rows):
                history.append({
                    "role": "user",
                    "content": row[0]
                })
                if row[1]:  # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç
                    history.append({
                        "role": "assistant", 
                        "content": row[1]
                    })
            
            return history
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            return []
    
    @staticmethod
    async def _save_message_to_history(user_id: int, message: str, response: str) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        try:
            await db.execute("""
                INSERT INTO chat_history (user_id, message, response)
                VALUES (?, ?, ?)
            """, (user_id, message, response))
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∑–∞–ø–∏—Å–µ–π)
            await db.execute("""
                DELETE FROM chat_history 
                WHERE user_id = ? AND id NOT IN (
                    SELECT id FROM chat_history 
                    WHERE user_id = ? 
                    ORDER BY timestamp DESC 
                    LIMIT 20
                )
            """, (user_id, user_id))
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é: {e}")
    
    @staticmethod
    async def setup_real_openai_integration():
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å OpenAI (–¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)"""
        # TODO: –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ API –∫–ª—é—á
        
        # import openai
        # from openai import OpenAI
        
        # api_key = config.get('OPENAI_API_KEY')
        # client = OpenAI(api_key=api_key)
        
        # system_message = config.get('OPENAI_SYSTEM_MESSAGE', '–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.')
        
        # # –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI
        # response = await client.chat.completions.create(
        #     model="gpt-3.5-turbo",  # –ò–õ–ò –ó–ê–ú–ï–ù–ò –ù–ê –ù–£–ñ–ù–£–Æ –ú–û–î–ï–õ–¨
        #     messages=[
        #         {"role": "system", "content": system_message},
        #         *message_history,
        #         {"role": "user", "content": user_message}
        #     ],
        #     max_tokens=1000,
        #     temperature=0.7
        # )
        
        # return response.choices[0].message.content
        
        pass