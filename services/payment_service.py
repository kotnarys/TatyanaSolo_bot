import hashlib
import json
import aiohttp
from typing import Optional
from utils.config_loader import config

class PaymentService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å CloudPayments"""
    
    @staticmethod
    async def create_payment(amount: float, description: str, payment_id: str, user_id: int) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É CloudPayments"""
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CloudPayments
        public_id = config.get('CLOUDPAYMENTS_PUBLIC_ID')
        api_secret = config.get('CLOUDPAYMENTS_API_SECRET')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        dev_mode = config.get('DEV_MODE', 'FALSE').upper() == 'TRUE'
        
        if dev_mode:
            print(f"üß™ –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –æ–ø–ª–∞—Ç—É")
            # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π Public ID
            public_id = config.get('CLOUDPAYMENTS_TEST_PUBLIC_ID', public_id)
        
        if not public_id or public_id in ['TEMP_PLACEHOLDER', 'YOUR_PUBLIC_ID_HERE']:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Å—ã–ª–∫—É –µ—Å–ª–∏ –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
            return f"https://demo.cloudpayments.ru/test?amount={amount}&id={payment_id}"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
        payment_data = {
            'amount': amount,
            'currency': 'RUB',
            'description': description,
            'invoiceId': payment_id,
            'accountId': str(user_id),
            'email': f"user{user_id}@telegram.bot",  # –í—Ä–µ–º–µ–Ω–Ω—ã–π email
            'requireConfirmation': False,  # –ù–µ —Ç—Ä–µ–±—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
            'cultureName': 'ru-RU'
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–∂–µ—Ç CloudPayments
        if dev_mode:
            # –¢–µ—Å—Ç–æ–≤—ã–π –≤–∏–¥–∂–µ—Ç
            widget_url = f"https://widget.cloudpayments.ru/widgets/test/{public_id}"
        else:
            # –ë–æ–µ–≤–æ–π –≤–∏–¥–∂–µ—Ç
            widget_url = f"https://widget.cloudpayments.ru/widgets/{public_id}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫ —Å—Å—ã–ª–∫–µ
        params = []
        for key, value in payment_data.items():
            params.append(f"{key}={value}")
        
        widget_params = "&".join(params)
        final_url = f"{widget_url}?{widget_params}"
        
        print(f"üí≥ –°–æ–∑–¥–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: {final_url}")
        return final_url
    
    @staticmethod
    async def create_payment_link_simple(amount: float, description: str, payment_id: str, user_id: int) -> str:
        """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
        public_id = config.get('CLOUDPAYMENTS_PUBLIC_ID', 'test_api_00000000000000000000001')
        
        # –ü—Ä–æ—Å—Ç–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–∂–µ—Ç CloudPayments
        payment_url = (
            f"https://widget.cloudpayments.ru/widgets/{public_id}?"
            f"amount={amount}&"
            f"currency=RUB&"
            f"description={description}&"
            f"invoiceId={payment_id}&"
            f"accountId={user_id}&"
            f"email=user{user_id}@test.com&"
            f"requireConfirmation=false&"
            f"cultureName=ru-RU"
        )
        
        return payment_url
    
    @staticmethod
    async def test_payment_api() -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API CloudPayments"""
        try:
            public_id = config.get('CLOUDPAYMENTS_PUBLIC_ID')
            api_secret = config.get('CLOUDPAYMENTS_API_SECRET')
            
            if not public_id or not api_secret:
                print("‚ö†Ô∏è –ö–ª—é—á–∏ CloudPayments –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
                return False
            
            # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ API
            test_url = "https://api.cloudpayments.ru/test"
            
            async with aiohttp.ClientSession() as session:
                auth = aiohttp.BasicAuth(public_id, api_secret)
                async with session.post(test_url, auth=auth) as response:
                    if response.status == 200:
                        print("‚úÖ CloudPayments API —Ä–∞–±–æ—Ç–∞–µ—Ç")
                        return True
                    else:
                        print(f"‚ùå CloudPayments API –æ—à–∏–±–∫–∞: {response.status}")
                        return False
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è CloudPayments API: {e}")
            return False
    
    @staticmethod
    def verify_webhook_signature(data: str, signature: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –≤–µ–±-—Ö—É–∫–∞ CloudPayments"""
        
        api_secret = config.get('CLOUDPAYMENTS_API_SECRET')
        if not api_secret:
            print("‚ö†Ô∏è API Secret –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        try:
            # –í—ã—á–∏—Å–ª—è–µ–º HMAC-SHA256
            import hmac
            expected_signature = hmac.new(
                api_secret.encode('utf-8'),
                data.encode('utf-8'),
                hashlib.sha256
            ).hexdigest()
            
            result = hmac.compare_digest(expected_signature.lower(), signature.lower())
            print(f"üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏: {'‚úÖ OK' if result else '‚ùå FAIL'}")
            return result
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏: {e}")
            return False