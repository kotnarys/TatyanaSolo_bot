import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

from utils.config_loader import config
from database.connection import db
from handlers import start, payments, chat
# –ü–æ–¥–∫–ª—é—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
try:
    from handlers import registration
    registration_available = True
except ImportError:
    registration_available = False
    print("‚ö†Ô∏è –ú–æ–¥—É–ª—å registration –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

try:
    from handlers import referrals
    referrals_available = True
except ImportError:
    referrals_available = False
    print("‚ö†Ô∏è –ú–æ–¥—É–ª—å referrals –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

try:
    from handlers import profile
    profile_available = True
except ImportError:
    profile_available = False
    print("‚ö†Ô∏è –ú–æ–¥—É–ª—å profile –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    bot_token = config.get('TELEGRAM_BOT_TOKEN')
    if not bot_token or bot_token == 'YOUR_BOT_TOKEN_HERE':
        logger.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª config/settings.txt")
        return
    
    # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    bot = Bot(
        token=bot_token,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )
    
    dp = Dispatcher()
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await db.connect()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
        dp.include_router(start.router)
        if registration_available:
            dp.include_router(registration.router)
            print("‚úÖ –ú–æ–¥—É–ª—å registration –ø–æ–¥–∫–ª—é—á–µ–Ω")
        if referrals_available:
            dp.include_router(referrals.router)
            print("‚úÖ –ú–æ–¥—É–ª—å referrals –ø–æ–¥–∫–ª—é—á–µ–Ω")
        if profile_available:
            dp.include_router(profile.router)
            print("‚úÖ –ú–æ–¥—É–ª—å profile –ø–æ–¥–∫–ª—é—á–µ–Ω")
        dp.include_router(payments.router)  
        dp.include_router(chat.router)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ (–ë–ï–ó /start —á—Ç–æ–±—ã –Ω–µ —Ç–µ—Ä—è—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
        from aiogram.types import BotCommand
        await bot.set_my_commands([
            BotCommand(command="profile", description="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"),
            BotCommand(command="referral", description="üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞"),
        ])
        
        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        await db.disconnect()
        await bot.session.close()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")