from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
import uuid
from datetime import datetime

from database.queries import UserQueries, PaymentQueries, ReferralQueries
from utils.config_loader import config, load_tariff2_strings
from services.payment_service import PaymentService

router = Router()

@router.callback_query(F.data.startswith("buy_tariff_"))
async def handle_tariff_purchase(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Ç–∞—Ä–∏—Ñ–∞"""
    user_id = callback.from_user.id
    tariff_type = int(callback.data.split("_")[-1])  # buy_tariff_1 -> 1
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = await UserQueries.get_user(user_id)
    if not user_data:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—É —Ç–∞—Ä–∏—Ñ–∞
    if tariff_type == 1:
        original_price = config.get_int('TARIFF_1_PRICE')
        tariff_name = "–¢–∞—Ä–∏—Ñ 1 (–ë–∞–∑–æ–≤—ã–π)"
    elif tariff_type == 2:
        original_price = config.get_int('TARIFF_2_PRICE')
        tariff_name = "–¢–∞—Ä–∏—Ñ 2 (–ü—Ä–µ–º–∏—É–º)"
    else:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ")
        return
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∫–∏–¥–∫—É
    referral_balance = user_data['referral_balance']
    discount_amount = min(referral_balance, original_price)
    final_price = original_price - discount_amount
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    payment_text = f"üí≥ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
    payment_text += f"üì¶ –¢–∞—Ä–∏—Ñ: {tariff_name}\n"
    payment_text += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {original_price}‚ÇΩ\n"
    
    if discount_amount > 0:
        payment_text += f"üéÅ –í–∞—à–∞ —Å–∫–∏–¥–∫–∞: -{discount_amount}‚ÇΩ\n"
        payment_text += f"üí∏ –ö –æ–ø–ª–∞—Ç–µ: <b>{final_price}‚ÇΩ</b>\n\n"
    else:
        payment_text += f"üí∏ –ö –æ–ø–ª–∞—Ç–µ: <b>{final_price}‚ÇΩ</b>\n\n"
    
    # –û–ø–∏—Å–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞
    if tariff_type == 1:
        payment_text += "üîì –ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:\n‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –Ω–∞ 30 –¥–Ω–µ–π\n‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∫ –ò–ò"
    else:
        payment_text += "üîì –ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:\n‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –Ω–∞ 30 –¥–Ω–µ–π\n‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∫ –ò–ò\n‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∫—É—Ä—Å–∞"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    dev_mode = config.get('DEV_MODE', 'FALSE').upper() == 'TRUE'
    
    if dev_mode:
        # –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - –∏ —Ç–µ—Å—Ç–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ –ò —Ä–µ–∞–ª—å–Ω—ã–π CloudPayments
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ CloudPayments (—Ç–µ—Å—Ç)", callback_data=f"cloudpay_{tariff_type}_{final_price}_{discount_amount}")],
            [InlineKeyboardButton(text="‚úÖ –ë—ã—Å—Ç—Ä–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞", callback_data=f"test_pay_{tariff_type}_{final_price}_{discount_amount}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")]
        ])
        payment_text += "\n\nüß™ <b>–†–ï–ñ–ò–ú –†–ê–ó–†–ê–ë–û–¢–ö–ò</b>\n"
        payment_text += "‚Ä¢ CloudPayments (—Ç–µ—Å—Ç) - –Ω–∞—Å—Ç–æ—è—â–∏–π –≤–∏–¥–∂–µ—Ç —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –∫–∞—Ä—Ç–∞–º–∏\n"
        payment_text += "‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ - –º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —ç–º—É–ª—è—Ü–∏—è"
    else:
        # –†–µ–∞–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ CloudPayments
        payment_id = str(uuid.uuid4())
        payment_url = await PaymentService.create_payment(
            amount=final_price,
            description=f"{tariff_name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}",
            payment_id=payment_id,
            user_id=user_id
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ë–î
        await PaymentQueries.create_payment(payment_id, user_id, final_price, tariff_type)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")]
        ])
    
    await callback.message.edit_text(payment_text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data.startswith("cloudpay_"))
async def handle_cloudpayments_test(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ CloudPayments —Ç–µ—Å—Ç–æ–≤–æ–π –æ–ø–ª–∞—Ç—ã"""
    user_id = callback.from_user.id
    
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: cloudpay_1_1000_0
        _, tariff_type, final_price, discount_amount = callback.data.split("_")
        tariff_type = int(tariff_type)
        final_price = float(final_price)
        discount_amount = float(discount_amount)
    except (ValueError, IndexError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ CloudPayments
    payment_id = str(uuid.uuid4())
    tariff_name = f"–¢–∞—Ä–∏—Ñ {tariff_type}"
    
    try:
        payment_url = await PaymentService.create_payment(
            amount=final_price,
            description=f"{tariff_name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}",
            payment_id=payment_id,
            user_id=user_id
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ë–î
        await PaymentQueries.create_payment(payment_id, user_id, final_price, tariff_type)
        
        cloudpay_text = "üí≥ <b>CloudPayments (–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)</b>\n\n"
        cloudpay_text += f"üí∞ –°—É–º–º–∞: {final_price}‚ÇΩ\n"
        cloudpay_text += f"üì¶ –¢–∞—Ä–∏—Ñ: {tariff_name}\n\n"
        cloudpay_text += "üß™ <b>–¢–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:</b>\n"
        cloudpay_text += "‚Ä¢ <code>4242424242424242</code> (Visa)\n"
        cloudpay_text += "‚Ä¢ <code>5555555555554444</code> (MasterCard)\n"
        cloudpay_text += "‚Ä¢ CVV: –ª—é–±–æ–π 3-–∑–Ω–∞—á–Ω—ã–π\n"
        cloudpay_text += "‚Ä¢ –°—Ä–æ–∫: –ª—é–±–∞—è –±—É–¥—É—â–∞—è –¥–∞—Ç–∞\n\n"
        cloudpay_text += "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ:"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=payment_url)],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")]
        ])
        
        await callback.message.edit_text(cloudpay_text, reply_markup=keyboard)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è CloudPayments –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CloudPayments –≤ config/settings.txt",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
    
    await callback.answer()

@router.callback_query(F.data.startswith("test_pay_"))
async def handle_test_payment(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –æ–ø–ª–∞—Ç—ã (—Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)"""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    dev_mode = config.get('DEV_MODE', 'FALSE').upper() == 'TRUE'
    if not dev_mode:
        await callback.answer("‚ùå –¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: test_pay_1_1000_0
        _, _, tariff_type, final_price, discount_amount = callback.data.split("_")
        tariff_type = int(tariff_type)
        final_price = float(final_price)
        discount_amount = float(discount_amount)
    except (ValueError, IndexError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞")
        return
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É
    user_data = await UserQueries.get_user(user_id)
    if user_data and user_data['phone_number']:
        await process_successful_payment(user_data['phone_number'], tariff_type, final_price, discount_amount, callback.bot, is_test=True)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    success_text = "‚úÖ <b>–¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞!</b>\n\n"
    success_text += f"üì¶ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: –¢–∞—Ä–∏—Ñ {tariff_type}\n"
    success_text += f"üí∞ –°—É–º–º–∞: {final_price}‚ÇΩ\n"
    success_text += "‚è± –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 30 –¥–Ω–µ–π\n\n"
    success_text += "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º! üéâ"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(success_text, reply_markup=keyboard)
    await callback.answer("üí∏ –¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")

async def process_successful_payment(phone_number: str, tariff_type: int, amount: float, discount_used: float, bot=None, is_test: bool = False):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã"""
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –î–û –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    user_data_before = await UserQueries.get_user_by_phone(phone_number)
    is_first_payment = not user_data_before.get('has_paid', False) if user_data_before else True
    
    print(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã –¥–ª—è {phone_number}, –ø–µ—Ä–≤–∞—è –æ–ø–ª–∞—Ç–∞: {is_first_payment}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await UserQueries.update_subscription(phone_number, tariff_type, days=30)
    
    # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ - —Å–ø–∏—Å—ã–≤–∞–µ–º —Å –±–∞–ª–∞–Ω—Å–∞
    if discount_used > 0:
        await ReferralQueries.use_referral_balance(phone_number, discount_used)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –æ–ø–ª–∞—Ç–∞
    if is_first_payment and user_data_before and user_data_before['referrer_phone']:
        referrer_phone = user_data_before['referrer_phone']
        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞: {referrer_phone}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ—Ñ–µ—Ä–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –æ–ø–ª–∞—á–∏–≤–∞–ª
        referrer_data = await UserQueries.get_user_by_phone(referrer_phone)
        if referrer_data and referrer_data['has_paid']:
            bonus_amount = config.get_int('REFERRAL_BONUS')
            success = await ReferralQueries.add_referral_bonus(
                referrer_phone, 
                phone_number, 
                bonus_amount
            )
            
            if success:
                print(f"üí∞ ‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å {bonus_amount}‚ÇΩ –Ω–∞—á–∏—Å–ª–µ–Ω —Ä–µ—Ñ–µ—Ä–µ—Ä—É {referrer_phone}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É
                if bot and referrer_data['user_id']:
                    try:
                        await bot.send_message(
                            referrer_data['user_id'],
                            f"üéâ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –Ω–∞—á–∏—Å–ª–µ–Ω!</b>\n\n"
                            f"üí∞ +{bonus_amount}‚ÇΩ –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–≥–∞\n"
                            f"üì± –ù–æ–º–µ—Ä: {phone_number}\n\n"
                            f"–ë–æ–Ω—É—Å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ —Å–∫–∏–¥–∫—É –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –ø–æ–¥–ø–∏—Å–∫–∏!"
                        )
                        print(f"üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–µ—Ñ–µ—Ä–µ—Ä—É {referrer_data['user_id']}")
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–µ—Ä—É: {e}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞")
        else:
            if not referrer_data:
                print(f"‚ö†Ô∏è –†–µ—Ñ–µ—Ä–µ—Ä {referrer_phone} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
            else:
                print(f"‚ö†Ô∏è –†–µ—Ñ–µ—Ä–µ—Ä {referrer_phone} –µ—â–µ –Ω–µ –æ–ø–ª–∞—á–∏–≤–∞–ª –ø–æ–¥–ø–∏—Å–∫—É - –±–æ–Ω—É—Å –Ω–µ –Ω–∞—á–∏—Å–ª–µ–Ω")
    elif not is_first_payment:
        print(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {phone_number} —É–∂–µ –æ–ø–ª–∞—á–∏–≤–∞–ª —Ä–∞–Ω–µ–µ - —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –Ω–µ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è")
    elif not user_data_before or not user_data_before['referrer_phone']:
        print(f"‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {phone_number} –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–µ—Ä–∞")
    
    # –î–ª—è —Ç–∞—Ä–∏—Ñ–∞ 2 - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –∫—É—Ä—Å–∞
    if tariff_type == 2:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        user_data_after = await UserQueries.get_user_by_phone(phone_number)
        if user_data_after:
            await send_course_material(user_data_after['user_id'], user_data_after['tariff2_counter'], bot)

async def send_course_material(user_id: int, lesson_number: int, bot=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∫—É—Ä—Å–∞ –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ 2"""
    strings = load_tariff2_strings()
    
    if lesson_number <= len(strings):
        lesson_content = strings[lesson_number - 1]  # -1 —Ç–∞–∫ –∫–∞–∫ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Å 0
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–º
        course_message = f"üéì <b>–ù–æ–≤—ã–π —É—Ä–æ–∫ –¥–æ—Å—Ç—É–ø–µ–Ω!</b>\n\n"
        course_message += f"üìö <b>–£—Ä–æ–∫ {lesson_number}</b>\n\n"
        course_message += f"{lesson_content}\n\n"
        course_message += f"üí° <i>–≠—Ç–æ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –¢–∞—Ä–∏—Ñ–∞ 2</i>"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if bot:
            try:
                await bot.send_message(user_id, course_message)
                print(f"‚úÖ –£—Ä–æ–∫ {lesson_number} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ä–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        else:
            print(f"‚ö†Ô∏è –ë–æ—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, —É—Ä–æ–∫ {lesson_number} –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    else:
        print(f"‚ö†Ô∏è –ù–µ—Ç —É—Ä–æ–∫–∞ {lesson_number} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} - –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏—Å—á–µ—Ä–ø–∞–Ω—ã")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á—Ç–æ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
        if bot:
            try:
                await bot.send_message(
                    user_id,
                    "üìö <b>–í—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∫—É—Ä—Å–∞ –ø–æ–ª—É—á–µ–Ω—ã!</b>\n\n"
                    "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–∫–∏ –∫—É—Ä—Å–∞.\n"
                    "üí° –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ - –≤–æ–∑–º–æ–∂–Ω–æ, —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã!"
                )
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")