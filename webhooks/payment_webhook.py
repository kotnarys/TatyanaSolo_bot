from aiohttp import web, web_request
import json
from database.queries import UserQueries, PaymentQueries
from services.payment_service import PaymentService
from handlers.payments import process_successful_payment

class PaymentWebhook:
    """–í–µ–±-—Ö—É–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–ª–∞—Ç–µ–∂–∞—Ö"""
    
    @staticmethod
    async def handle_cloudpayments_webhook(request: web_request.Request) -> web.Response:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±-—Ö—É–∫–∞ –æ—Ç CloudPayments"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            body = await request.text()
            signature = request.headers.get('X-HMAC-SHA256', '')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å (–≤ —Ä–µ–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ)
            dev_mode = True  # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ config
            if not dev_mode and not PaymentService.verify_webhook_signature(body, signature):
                return web.Response(status=401, text="Invalid signature")
            
            # –ü–∞—Ä—Å–∏–º JSON
            data = json.loads(body)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–µ
            payment_id = data.get('InvoiceId')
            amount = float(data.get('Amount', 0))
            status = data.get('Status')  # Completed –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
            account_id = data.get('AccountId')  # user_id
            
            if status == 'Completed' and payment_id and account_id:
                user_id = int(account_id)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –ë–î
                await PaymentQueries.update_payment_status(payment_id, 'completed')
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞—Ä–∏—Ñ (–Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ë–î)
                # TODO: –î–æ–±–∞–≤–∏—Ç—å –≤ PaymentQueries –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞
                
                # –í—Ä–µ–º–µ–Ω–Ω–æ –±–µ—Ä–µ–º —Ç–∞—Ä–∏—Ñ 1 (–Ω—É–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å)
                tariff_type = 1
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
                await process_successful_payment(user_id, tariff_type, amount, 0.0, bot=None, is_test=False)
                
                return web.Response(status=200, text="OK")
            
            return web.Response(status=400, text="Invalid payment data")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±-—Ö—É–∫–∞: {e}")
            return web.Response(status=500, text="Internal error")
    
    @staticmethod
    async def handle_website_webhook(request: web_request.Request) -> web.Response:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±-—Ö—É–∫–∞ —Å —Å–∞–π—Ç–∞ (–∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–ª–∞—Ç–∏–ª –Ω–∞ —Å–∞–π—Ç–µ)"""
        try:
            data = await request.json()
            
            # –û–∂–∏–¥–∞–µ–º—ã–µ –ø–æ–ª—è: phone_number, tariff_type, amount
            phone_number = data.get('phone_number')
            tariff_type = int(data.get('tariff_type', 1))
            amount = float(data.get('amount', 0))
            
            if not phone_number:
                return web.Response(status=400, text="Phone number required")
            
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            user_data = await UserQueries.get_user_by_phone(phone_number)
            
            if user_data:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω - –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                user_id = user_data['user_id']
                await process_successful_payment(user_id, tariff_type, amount, 0.0, bot=None, is_test=False)
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–Ω –∑–∞–ø—É—Å—Ç–∏—Ç –±–æ—Ç–∞ –ø–æ–∑–∂–µ)
                # –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
                await UserQueries.create_user(
                    user_id=0,  # –í—Ä–µ–º–µ–Ω–Ω—ã–π ID, –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
                    phone_number=phone_number
                )
                # TODO: –î–æ—Ä–∞–±–æ—Ç–∞—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –Ω–∞ —Å–∞–π—Ç–µ
            
            return web.Response(status=200, text="OK")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±-—Ö—É–∫–∞ —Å–∞–π—Ç–∞: {e}")
            return web.Response(status=500, text="Internal error")

# –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –≤–µ–±-—Ö—É–∫–æ–≤
async def create_webhook_app():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±-—Ö—É–∫–æ–≤"""
    app = web.Application()
    
    # –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –≤–µ–±-—Ö—É–∫–æ–≤
    app.router.add_post('/webhook/cloudpayments', PaymentWebhook.handle_cloudpayments_webhook)
    app.router.add_post('/webhook/website', PaymentWebhook.handle_website_webhook)
    
    return app

# –î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-—Ö—É–∫–æ–≤ –æ—Ç–¥–µ–ª—å–Ω–æ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
if __name__ == "__main__":
    import asyncio
    from aiohttp import web
    
    async def main():
        app = await create_webhook_app()
        runner = web.AppRunner(app)
        await runner.setup()
        
        site = web.TCPSite(runner, 'localhost', 8000)
        await site.start()
        
        print("üåê –í–µ–±-—Ö—É–∫–∏ –∑–∞–ø—É—â–µ–Ω—ã –Ω–∞ http://localhost:8000")
        
        # –î–µ—Ä–∂–∏–º —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
        await asyncio.Event().wait()
    
    asyncio.run(main())